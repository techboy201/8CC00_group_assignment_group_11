import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import classification_report
from rdkit import Chem
from rdkit.Chem import AllChem

# Load data
data = pd.read_csv("tested_molecules.csv")
untested_data = pd.read_csv("untested_molecules-3.csv")

data.columns = ["SMILES", "PKM2_inhibition", "ERK2_inhibition"]

# Convert inhibition columns to integers
data["PKM2_inhibition"] = data["PKM2_inhibition"].astype(int)
data["ERK2_inhibition"] = data["ERK2_inhibition"].astype(int)

# Preprocessing for KNN
# Function to convert SMILES to Morgan fingerprints
def smiles_to_fingerprint(smiles, radius=2, n_bits=2048):
    mol = Chem.MolFromSmiles(smiles)
    if mol is None:
        return None
    fp = AllChem.GetMorganFingerprintAsBitVect(mol, radius, nBits=n_bits)
    return np.array(fp)

# Apply the function to create the feature matrix
data['features'] = data['SMILES'].apply(smiles_to_fingerprint)
data = data.dropna(subset=['features'])

# Convert list of arrays to 2D array
X_knn = np.array(data['features'].tolist())

# Create the y matrix for multi-label classification
y = data[['PKM2_inhibition', 'ERK2_inhibition']].values

# Split the data into training and test sets
A_samples = data[data["PKM2_inhibition"] == 1]
B_samples = data[data["ERK2_inhibition"] == 1]
A_train, A_test = train_test_split(A_samples, test_size=0.2, random_state=42)
B_train, B_test = train_test_split(B_samples, test_size=0.2, random_state=42)
train_data_knn = pd.concat([A_train, B_train], axis=0).sample(frac=1, random_state=42).reset_index(drop=True)
test_data_knn = pd.concat([A_test, B_test], axis=0).sample(frac=1, random_state=42).reset_index(drop=True)

# Separate features and labels for KNN
X_train_knn, y_train_knn = np.array(train_data_knn['features'].tolist()), train_data_knn[['PKM2_inhibition', 'ERK2_inhibition']].values
X_test_knn, y_test_knn = np.array(test_data_knn['features'].tolist()), test_data_knn[['PKM2_inhibition', 'ERK2_inhibition']].values

# Train and Evaluate the KNN Model
knn_classifier = KNeighborsClassifier(n_neighbors=5)
knn_classifier.fit(X_train_knn, y_train_knn)

knn_predictions = knn_classifier.predict(X_test_knn)
knn_report = classification_report(y_test_knn, knn_predictions, target_names=["PKM2_inhibition", "ERK2_inhibition"], zero_division=0)

print("K Nearest Neighbors Model:")
print(knn_report)

# Predicting for untested molecules
untested_data.columns = ["SMILES", "PKM2_inhibition", "ERK2_inhibition"]

# Preprocessing untested data
untested_data['features'] = untested_data['SMILES'].apply(smiles_to_fingerprint)
untested_data = untested_data.dropna(subset=['features'])

# Convert list of arrays to 2D array
X_untested = np.array(untested_data['features'].tolist())

# Predict the inhibition properties for the untested molecules
untested_predictions = knn_classifier.predict(X_untested)

# Fill the predictions in the untested_data DataFrame
untested_data['PKM2_inhibition'] = untested_predictions[:, 0]
untested_data['ERK2_inhibition'] = untested_predictions[:, 1]

# Summary of the predictions
pkm2_inhibition_count = untested_data['PKM2_inhibition'].value_counts()
erk2_inhibition_count = untested_data['ERK2_inhibition'].value_counts()

print("\nPredicted PKM2 inhibition summary:")
print(pkm2_inhibition_count)

print("\nPredicted ERK2 inhibition summary:")
print(erk2_inhibition_count)

# Save the results to a new CSV file
untested_data[['SMILES', 'PKM2_inhibition', 'ERK2_inhibition']].to_csv("predicted_untested_molecules.csv", index=False)

sorted_data = untested_data[(untested_data['PKM2_inhibition'] == 1) & (untested_data['ERK2_inhibition'] == 0)]
print(sorted_data[['SMILES', 'PKM2_inhibition', 'ERK2_inhibition']])
